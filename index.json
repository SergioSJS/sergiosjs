[{"categories":null,"contents":"Wiki4HE is a database containing a questionnaire that was applied to teachers with topics regarding their perception of Wikipedia as a tool for other collaborators and students.\nObjective of this work:\n Basic statistics on participating teachers Analysis of different user groups for the items “Perceived Enjoyment” ENJ1 and ENJ2 Other interesting analyzes Create a model capable of predicting whether or not a teacher recommends using Wikipedia for his students  ","permalink":"https://sergiosjs.github.io/projects/data_science/ds_wiki4he/","tags":["python","analysis","Machine Learning","plotly","jupyter notebook","sklearn","pandas"],"title":"wiki4HE Exploration, Machine Learning and Storytelling"},{"categories":null,"contents":"This dataset contain four data files:\n Payment (Pagamento): with list of realized payments Ticket (Passagem): purchased tickets Stretch (Trecho): The stretches of the travel Travel (Viagem): Travel itself  In this first part, a descriptive analysis of the data set Travel is performed, grouping the data by various attributes and plotting some graphs.\n","permalink":"https://sergiosjs.github.io/projects/data_science/ds_travel_br_2019/","tags":["python","analysis","plotly","jupyter notebook","sklearn","pandas"],"title":"Exploration of Brazilian federal travel data"},{"categories":null,"contents":"This dataset consist a 721 pokemons of the 1 to 6 Generations, including several features like stats, types, catch rate, if the pokemon is legendary and others, totaling 21 variables. With him we will try to answer the fallowing questions:\n How the amount of pokemons is distributed per generation? Is there missing data in this dataset? Is there any relationship between the type of pokemon and it\u0026rsquo;s color? Which pokemons have the highest attributes values? and lowest? Are there correlations between other attributes? Can we find clusters among pokemons? Can we create a classifying model for legendary pokemons?  ","permalink":"https://sergiosjs.github.io/projects/data_science/ds_poke/","tags":["python","analysis","Machine Learning","plotly","jupyter notebook","sklearn","pandas"],"title":"Pokeanalysis and Predicting Legendaries"},{"categories":null,"contents":"A pack to run IRACE with python.\nIRACE: Iterated Racing for Automatic Algorithm Configuration\nIterated race is an extension of the Iterated F-race method for the automatic configuration of optimization algorithms, that is, (offline) tuning their parameters by finding the most appropriate settings given a set of instances of an optimization problem.\n","permalink":"https://sergiosjs.github.io/projects/others/irace/","tags":["python","IRACE","R"],"title":"Running IRACE with python"},{"categories":null,"contents":"Python version of Heuristic techniques for solving the Traveling Salesman Problem.\n Hill Climbing Iterated Local Search (ILS) Greedy Randomized Adaptive Search Procedure (Grasp) Tabu Search Genetic Algorithm  ","permalink":"https://sergiosjs.github.io/projects/others/heuristics/","tags":["python","analysis","numpy"],"title":"Computational heuristics"},{"categories":null,"contents":"In this project it was verified my reinforcement learning algorithm and test the deep-q-learning applying in Atari games. Also check the domain adaptation technique in 2 games of Atari 2600, Space Invaders and Demon Attack, games with similar gameplay and style. The goal of creating a generalist model capable of playing more than one game and trying to help it converge more quickly. We noticed that the domain transfer slowed learning but allowed a higher score at the beginning of the training. When comparing the models trained in two games and testing them in the domain of origin, we could verify that the model forgets what it has learned, reaching a score close to random.\n","permalink":"https://sergiosjs.github.io/projects/data_science/ds_rl/","tags":["python","analysis","Machine Learning","reinforcement learning","q-learning","keras","tensorflow","deep-learning"],"title":"Reinforcement Learning"},{"categories":null,"contents":"This simple model has only one hyperparameter, the number of weak models, therefore, the greater the quantity, better the nidek or better rule. The algorithm automatically checks and selects the best rules with the best accuracy. After that, it performs the evaluation of the alpha, fallowed by change the weights of the data, increasing the weights of wrong classified data. This process repeat until the hyperparameter value. A important observation, how after each rule the data distribuction change, the algorithm can be select the same rules but with different values of alpha and weights.\n","permalink":"https://sergiosjs.github.io/projects/data_science/ds_adaboost/","tags":["python","analysis","Machine Learning","adaboost","jupyter notebook","numpy"],"title":"Adaboost with numpy"},{"categories":null,"contents":"A simple test with Keras and MNIST to assess impact by varying hyperparans to predict numerical characteres. The best result can be seen in the image below.\n","permalink":"https://sergiosjs.github.io/projects/data_science/ds_keras_mnist/","tags":["python","analysis","Machine Learning","keras","jupyter notebook","tensorflow","deep-learning"],"title":"Keras + MNIST"},{"categories":null,"contents":"Several state-space search algorithms applied to solve maze problems:\n A* Uniform Cost Search Best First Search Iterative Deepining Search Depth Limited Search Deep First Search Breadth First Search  ","permalink":"https://sergiosjs.github.io/projects/others/best_path/","tags":["python","jupyter notebook","numpy"],"title":"Maze Best Path"},{"categories":null,"contents":"Classification is a important field of study in Machine Learning area. Traditional algorithms relay on closed-set scenarios, where the label classes are known in prior. Thus, in real world we eventually deal with unknown instances of data. To treat unseen instances in a proper way, a approach called Openset classification was developed. This paper briefly surveys some of the recent works in Open-set Classification.\n","permalink":"https://sergiosjs.github.io/projects/data_science/ds_openset/","tags":["analysis","Machine Learning","deep-learning","open-set"],"title":"Survey: Open-set Classification"},{"categories":null,"contents":"The best deep representation level is the FC2 deep-feature, contain the most relevant features to classify. Early fusion and Late fusion can\u0026rsquo;t better than only FC2 deep feature. Lastly the Bagging approach achieved the best results of all experiments executed.\nThe domain of food is hard to classify, even for humans. This happens due to similarity between food made with the same ingredients wich belongs to different classes. Even so the deep feature FC2 showed up a good option and the Bagging technique is the best model.\n","permalink":"https://sergiosjs.github.io/projects/data_science/ds_food_rep/","tags":["python","analysis","Machine Learning","jupyter notebook","sklearn","deep-learning","keras","theano"],"title":"Technical Report: Exploiting Deep-Features Diversity in Food-11 Classification"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs]\rhome = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;]\rSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n...\r\u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }}\r{{ if .Params.tags }},\r\u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}},\r\u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }},\r...\rEdit fuse.js options to Search static/js/search.js\nkeys: [\r\u0026#34;title\u0026#34;,\r\u0026#34;contents\u0026#34;,\r\u0026#34;tags\u0026#34;,\r\u0026#34;categories\u0026#34;\r]\r","permalink":"https://sergiosjs.github.io/search/","tags":null,"title":"Search Results"}]